CPUS = 2
MEMORY = 4096
INTERFACE = ""
HOSTNAME = "centos-node"
NODES = 2
DOMAIN = ""

VAULT_PASS_FILE = "#{ENV['HOME']}/.vault_passwd"

Vagrant.configure("2") do |config|

    config.vm.box = "centos/7"
    config.vm.synced_folder '.', '/vagrant', disabled: true

    VAGRANT_ROOT = File.dirname(__FILE__)
    ANSIBLE_RAW_SSH_ARGS = []

    count = NODES
    (1..NODES).each do |i|

        n = i if NODES > 1
        ANSIBLE_RAW_SSH_ARGS << "-o IdentityFile=#{VAGRANT_ROOT}/.vagrant/machines/#{HOSTNAME}#{n}/virtualbox/private_key"

        config.vm.define "#{HOSTNAME}#{n}" do |node|

            if DOMAIN.nil? || DOMAIN.empty?
                node.vm.hostname = "#{HOSTNAME}#{n}"
            else
                node.vm.hostname = "#{HOSTNAME}#{n}.#{DOMAIN}"
            end

            if INTERFACE.to_s.empty?
                node.vm.network :private_network, ip: "10.19.0.#{i + 1}", netmask: "255.255.255.0"
            else
                node.vm.network :public_network, bridge: "#{INTERFACE}"
            end

            node.vm.provider :virtualbox do |vb|
                vb.name = node.vm.hostname
            end

            # Ansible provisioner
            count -= 1
            if count == 0
                node.vm.provision :ansible do |ansible|
                    ansible.limit = "all"
                    ansible.playbook = "ansible.yml"
                    ansible.become = true
                    ansible.become_user = "root"
                    ansible.raw_ssh_args = ANSIBLE_RAW_SSH_ARGS
                    if File.exist?(VAULT_PASS_FILE)
                        ansible.vault_password_file = VAULT_PASS_FILE
                    else
                        ansible.ask_vault_pass = true
                    end
                end
            end
        end
    end

    # Provider: virtualbox
    config.vm.provider :virtualbox do |vb|

        vb.gui = false

        # General
        vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
        vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]

        # System
        vb.memory = MEMORY
        vb.customize ["modifyvm", :id, "--boot1", "disk"]
        vb.customize ["modifyvm", :id, "--boot2", "dvd"]
        vb.customize ["modifyvm", :id, "--boot3", "none"]
        vb.customize ["modifyvm", :id, "--boot4", "none"]
        vb.customize ["modifyvm", :id, "--chipset", "ich9"]
        vb.customize ["modifyvm", :id, "--mouse", "ps2"]
        vb.customize ["modifyvm", :id, "--apic", "on"]
        vb.customize ["modifyvm", :id, "--rtcuseutc", "on"]
        vb.cpus = CPUS
        vb.customize ["modifyvm", :id, "--pae", "on"]
        vb.customize ["modifyvm", :id, "--paravirtprovider", "default"]
        vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
        vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
        vb.customize ["modifyvm", :id, "--vtxux", "on"]

        # Display
        vb.customize ["modifyvm", :id, "--vram", "16"]
        vb.customize ["modifyvm", :id, "--accelerate3d", "on"]

        # Storage
        vb.customize ["storagectl", :id, "--name", "IDE", "--controller", "ICH6", "--hostiocache", "on"]
        vb.customize ["storageattach", :id, "--storagectl", "IDE", "--port", "0", "--device", "0", "--type", "hdd", "--nonrotational", "on"]

        # Audio
        vb.customize ["modifyvm", :id, "--audio", "none"]

        # Network
        vb.customize ["modifyvm", :id, "--nictype1", "82540EM"]

        # USB
        vb.customize ["modifyvm", :id, "--usb", "on", "--usbehci", "on"]
    end

    # Shell provisioner: Enable remote root access
    config.vm.provision :shell, inline: <<-SHELL
        sed -i -e 's/^PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        sed -i -e 's/^#MaxAuthTries.*/MaxAuthTries #{NODES}/g' /etc/ssh/sshd_config
        centos_version=$(rpm -q centos-release | cut -d "-" -f 3)
        echo "Reload sshd (CentOS $centos_version)"
        if [[ "$centos_version" == "7" ]]; then
            systemctl reload sshd.service
        elif [[ "$centos_version" == "6" ]]; then
            service sshd reload
        else
            echo "Unable to reload sshd: Unknown CentOS version"
        fi
        echo "--> Server reporting for duty."
    SHELL
end
# vim: ft=ruby:ai:ts=4:sw=4:sts=4
